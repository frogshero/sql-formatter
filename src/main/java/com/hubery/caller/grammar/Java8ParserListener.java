package com.hubery.caller.grammar;
import org.antlr.v4.runtime.tree.ParseTreeListener;
public interface Java8ParserListener extends ParseTreeListener {
	void enterLiteral(Java8Parser.LiteralContext ctx);
	void exitLiteral(Java8Parser.LiteralContext ctx);
	void enterPrimitiveType(Java8Parser.PrimitiveTypeContext ctx);
	void exitPrimitiveType(Java8Parser.PrimitiveTypeContext ctx);
	void enterNumericType(Java8Parser.NumericTypeContext ctx);
	void exitNumericType(Java8Parser.NumericTypeContext ctx);
	void enterIntegralType(Java8Parser.IntegralTypeContext ctx);
	void exitIntegralType(Java8Parser.IntegralTypeContext ctx);
	void enterFloatingPointType(Java8Parser.FloatingPointTypeContext ctx);
	void exitFloatingPointType(Java8Parser.FloatingPointTypeContext ctx);
	void enterReferenceType(Java8Parser.ReferenceTypeContext ctx);
	void exitReferenceType(Java8Parser.ReferenceTypeContext ctx);
	void enterClassOrInterfaceType(Java8Parser.ClassOrInterfaceTypeContext ctx);
	void exitClassOrInterfaceType(Java8Parser.ClassOrInterfaceTypeContext ctx);
	void enterClassType(Java8Parser.ClassTypeContext ctx);
	void exitClassType(Java8Parser.ClassTypeContext ctx);
	void enterClassType_lf_classOrInterfaceType(Java8Parser.ClassType_lf_classOrInterfaceTypeContext ctx);
	void exitClassType_lf_classOrInterfaceType(Java8Parser.ClassType_lf_classOrInterfaceTypeContext ctx);
	void enterClassType_lfno_classOrInterfaceType(Java8Parser.ClassType_lfno_classOrInterfaceTypeContext ctx);
	void exitClassType_lfno_classOrInterfaceType(Java8Parser.ClassType_lfno_classOrInterfaceTypeContext ctx);
	void enterInterfaceType(Java8Parser.InterfaceTypeContext ctx);
	void exitInterfaceType(Java8Parser.InterfaceTypeContext ctx);
	void enterInterfaceType_lf_classOrInterfaceType(Java8Parser.InterfaceType_lf_classOrInterfaceTypeContext ctx);
	void exitInterfaceType_lf_classOrInterfaceType(Java8Parser.InterfaceType_lf_classOrInterfaceTypeContext ctx);
	void enterInterfaceType_lfno_classOrInterfaceType(Java8Parser.InterfaceType_lfno_classOrInterfaceTypeContext ctx);
	void exitInterfaceType_lfno_classOrInterfaceType(Java8Parser.InterfaceType_lfno_classOrInterfaceTypeContext ctx);
	void enterTypeVariable(Java8Parser.TypeVariableContext ctx);
	void exitTypeVariable(Java8Parser.TypeVariableContext ctx);
	void enterArrayType(Java8Parser.ArrayTypeContext ctx);
	void exitArrayType(Java8Parser.ArrayTypeContext ctx);
	void enterDims(Java8Parser.DimsContext ctx);
	void exitDims(Java8Parser.DimsContext ctx);
	void enterTypeParameter(Java8Parser.TypeParameterContext ctx);
	void exitTypeParameter(Java8Parser.TypeParameterContext ctx);
	void enterTypeParameterModifier(Java8Parser.TypeParameterModifierContext ctx);
	void exitTypeParameterModifier(Java8Parser.TypeParameterModifierContext ctx);
	void enterTypeBound(Java8Parser.TypeBoundContext ctx);
	void exitTypeBound(Java8Parser.TypeBoundContext ctx);
	void enterAdditionalBound(Java8Parser.AdditionalBoundContext ctx);
	void exitAdditionalBound(Java8Parser.AdditionalBoundContext ctx);
	void enterTypeArguments(Java8Parser.TypeArgumentsContext ctx);
	void exitTypeArguments(Java8Parser.TypeArgumentsContext ctx);
	void enterTypeArgumentList(Java8Parser.TypeArgumentListContext ctx);
	void exitTypeArgumentList(Java8Parser.TypeArgumentListContext ctx);
	void enterTypeArgument(Java8Parser.TypeArgumentContext ctx);
	void exitTypeArgument(Java8Parser.TypeArgumentContext ctx);
	void enterWildcard(Java8Parser.WildcardContext ctx);
	void exitWildcard(Java8Parser.WildcardContext ctx);
	void enterWildcardBounds(Java8Parser.WildcardBoundsContext ctx);
	void exitWildcardBounds(Java8Parser.WildcardBoundsContext ctx);
	void enterPackageName(Java8Parser.PackageNameContext ctx);
	void exitPackageName(Java8Parser.PackageNameContext ctx);
	void enterTypeName(Java8Parser.TypeNameContext ctx);
	void exitTypeName(Java8Parser.TypeNameContext ctx);
	void enterPackageOrTypeName(Java8Parser.PackageOrTypeNameContext ctx);
	void exitPackageOrTypeName(Java8Parser.PackageOrTypeNameContext ctx);
	void enterExpressionName(Java8Parser.ExpressionNameContext ctx);
	void exitExpressionName(Java8Parser.ExpressionNameContext ctx);
	void enterMethodName(Java8Parser.MethodNameContext ctx);
	void exitMethodName(Java8Parser.MethodNameContext ctx);
	void enterAmbiguousName(Java8Parser.AmbiguousNameContext ctx);
	void exitAmbiguousName(Java8Parser.AmbiguousNameContext ctx);
	void enterCompilationUnit(Java8Parser.CompilationUnitContext ctx);
	void exitCompilationUnit(Java8Parser.CompilationUnitContext ctx);
	void enterPackageDeclaration(Java8Parser.PackageDeclarationContext ctx);
	void exitPackageDeclaration(Java8Parser.PackageDeclarationContext ctx);
	void enterPackageModifier(Java8Parser.PackageModifierContext ctx);
	void exitPackageModifier(Java8Parser.PackageModifierContext ctx);
	void enterImportDeclaration(Java8Parser.ImportDeclarationContext ctx);
	void exitImportDeclaration(Java8Parser.ImportDeclarationContext ctx);
	void enterSingleTypeImportDeclaration(Java8Parser.SingleTypeImportDeclarationContext ctx);
	void exitSingleTypeImportDeclaration(Java8Parser.SingleTypeImportDeclarationContext ctx);
	void enterTypeImportOnDemandDeclaration(Java8Parser.TypeImportOnDemandDeclarationContext ctx);
	void exitTypeImportOnDemandDeclaration(Java8Parser.TypeImportOnDemandDeclarationContext ctx);
	void enterSingleStaticImportDeclaration(Java8Parser.SingleStaticImportDeclarationContext ctx);
	void exitSingleStaticImportDeclaration(Java8Parser.SingleStaticImportDeclarationContext ctx);
	void enterStaticImportOnDemandDeclaration(Java8Parser.StaticImportOnDemandDeclarationContext ctx);
	void exitStaticImportOnDemandDeclaration(Java8Parser.StaticImportOnDemandDeclarationContext ctx);
	void enterTypeDeclaration(Java8Parser.TypeDeclarationContext ctx);
	void exitTypeDeclaration(Java8Parser.TypeDeclarationContext ctx);
	void enterClassDeclaration(Java8Parser.ClassDeclarationContext ctx);
	void exitClassDeclaration(Java8Parser.ClassDeclarationContext ctx);
	void enterNormalClassDeclaration(Java8Parser.NormalClassDeclarationContext ctx);
	void exitNormalClassDeclaration(Java8Parser.NormalClassDeclarationContext ctx);
	void enterClassModifier(Java8Parser.ClassModifierContext ctx);
	void exitClassModifier(Java8Parser.ClassModifierContext ctx);
	void enterTypeParameters(Java8Parser.TypeParametersContext ctx);
	void exitTypeParameters(Java8Parser.TypeParametersContext ctx);
	void enterTypeParameterList(Java8Parser.TypeParameterListContext ctx);
	void exitTypeParameterList(Java8Parser.TypeParameterListContext ctx);
	void enterSuperclass(Java8Parser.SuperclassContext ctx);
	void exitSuperclass(Java8Parser.SuperclassContext ctx);
	void enterSuperinterfaces(Java8Parser.SuperinterfacesContext ctx);
	void exitSuperinterfaces(Java8Parser.SuperinterfacesContext ctx);
	void enterInterfaceTypeList(Java8Parser.InterfaceTypeListContext ctx);
	void exitInterfaceTypeList(Java8Parser.InterfaceTypeListContext ctx);
	void enterClassBody(Java8Parser.ClassBodyContext ctx);
	void exitClassBody(Java8Parser.ClassBodyContext ctx);
	void enterClassBodyDeclaration(Java8Parser.ClassBodyDeclarationContext ctx);
	void exitClassBodyDeclaration(Java8Parser.ClassBodyDeclarationContext ctx);
	void enterClassMemberDeclaration(Java8Parser.ClassMemberDeclarationContext ctx);
	void exitClassMemberDeclaration(Java8Parser.ClassMemberDeclarationContext ctx);
	void enterFieldDeclaration(Java8Parser.FieldDeclarationContext ctx);
	void exitFieldDeclaration(Java8Parser.FieldDeclarationContext ctx);
	void enterFieldModifier(Java8Parser.FieldModifierContext ctx);
	void exitFieldModifier(Java8Parser.FieldModifierContext ctx);
	void enterVariableDeclaratorList(Java8Parser.VariableDeclaratorListContext ctx);
	void exitVariableDeclaratorList(Java8Parser.VariableDeclaratorListContext ctx);
	void enterVariableDeclarator(Java8Parser.VariableDeclaratorContext ctx);
	void exitVariableDeclarator(Java8Parser.VariableDeclaratorContext ctx);
	void enterVariableDeclaratorId(Java8Parser.VariableDeclaratorIdContext ctx);
	void exitVariableDeclaratorId(Java8Parser.VariableDeclaratorIdContext ctx);
	void enterVariableInitializer(Java8Parser.VariableInitializerContext ctx);
	void exitVariableInitializer(Java8Parser.VariableInitializerContext ctx);
	void enterUnannType(Java8Parser.UnannTypeContext ctx);
	void exitUnannType(Java8Parser.UnannTypeContext ctx);
	void enterUnannPrimitiveType(Java8Parser.UnannPrimitiveTypeContext ctx);
	void exitUnannPrimitiveType(Java8Parser.UnannPrimitiveTypeContext ctx);
	void enterUnannReferenceType(Java8Parser.UnannReferenceTypeContext ctx);
	void exitUnannReferenceType(Java8Parser.UnannReferenceTypeContext ctx);
	void enterUnannClassOrInterfaceType(Java8Parser.UnannClassOrInterfaceTypeContext ctx);
	void exitUnannClassOrInterfaceType(Java8Parser.UnannClassOrInterfaceTypeContext ctx);
	void enterUnannClassType(Java8Parser.UnannClassTypeContext ctx);
	void exitUnannClassType(Java8Parser.UnannClassTypeContext ctx);
	void enterUnannClassType_lf_unannClassOrInterfaceType(Java8Parser.UnannClassType_lf_unannClassOrInterfaceTypeContext ctx);
	void exitUnannClassType_lf_unannClassOrInterfaceType(Java8Parser.UnannClassType_lf_unannClassOrInterfaceTypeContext ctx);
	void enterUnannClassType_lfno_unannClassOrInterfaceType(Java8Parser.UnannClassType_lfno_unannClassOrInterfaceTypeContext ctx);
	void exitUnannClassType_lfno_unannClassOrInterfaceType(Java8Parser.UnannClassType_lfno_unannClassOrInterfaceTypeContext ctx);
	void enterUnannInterfaceType(Java8Parser.UnannInterfaceTypeContext ctx);
	void exitUnannInterfaceType(Java8Parser.UnannInterfaceTypeContext ctx);
	void enterUnannInterfaceType_lf_unannClassOrInterfaceType(Java8Parser.UnannInterfaceType_lf_unannClassOrInterfaceTypeContext ctx);
	void exitUnannInterfaceType_lf_unannClassOrInterfaceType(Java8Parser.UnannInterfaceType_lf_unannClassOrInterfaceTypeContext ctx);
	void enterUnannInterfaceType_lfno_unannClassOrInterfaceType(Java8Parser.UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext ctx);
	void exitUnannInterfaceType_lfno_unannClassOrInterfaceType(Java8Parser.UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext ctx);
	void enterUnannTypeVariable(Java8Parser.UnannTypeVariableContext ctx);
	void exitUnannTypeVariable(Java8Parser.UnannTypeVariableContext ctx);
	void enterUnannArrayType(Java8Parser.UnannArrayTypeContext ctx);
	void exitUnannArrayType(Java8Parser.UnannArrayTypeContext ctx);
	void enterMethodDeclaration(Java8Parser.MethodDeclarationContext ctx);
	void exitMethodDeclaration(Java8Parser.MethodDeclarationContext ctx);
	void enterMethodModifier(Java8Parser.MethodModifierContext ctx);
	void exitMethodModifier(Java8Parser.MethodModifierContext ctx);
	void enterMethodHeader(Java8Parser.MethodHeaderContext ctx);
	void exitMethodHeader(Java8Parser.MethodHeaderContext ctx);
	void enterResult(Java8Parser.ResultContext ctx);
	void exitResult(Java8Parser.ResultContext ctx);
	void enterMethodDeclarator(Java8Parser.MethodDeclaratorContext ctx);
	void exitMethodDeclarator(Java8Parser.MethodDeclaratorContext ctx);
	void enterFormalParameterList(Java8Parser.FormalParameterListContext ctx);
	void exitFormalParameterList(Java8Parser.FormalParameterListContext ctx);
	void enterFormalParameters(Java8Parser.FormalParametersContext ctx);
	void exitFormalParameters(Java8Parser.FormalParametersContext ctx);
	void enterFormalParameter(Java8Parser.FormalParameterContext ctx);
	void exitFormalParameter(Java8Parser.FormalParameterContext ctx);
	void enterVariableModifier(Java8Parser.VariableModifierContext ctx);
	void exitVariableModifier(Java8Parser.VariableModifierContext ctx);
	void enterLastFormalParameter(Java8Parser.LastFormalParameterContext ctx);
	void exitLastFormalParameter(Java8Parser.LastFormalParameterContext ctx);
	void enterReceiverParameter(Java8Parser.ReceiverParameterContext ctx);
	void exitReceiverParameter(Java8Parser.ReceiverParameterContext ctx);
	void enterThrows_(Java8Parser.Throws_Context ctx);
	void exitThrows_(Java8Parser.Throws_Context ctx);
	void enterExceptionTypeList(Java8Parser.ExceptionTypeListContext ctx);
	void exitExceptionTypeList(Java8Parser.ExceptionTypeListContext ctx);
	void enterExceptionType(Java8Parser.ExceptionTypeContext ctx);
	void exitExceptionType(Java8Parser.ExceptionTypeContext ctx);
	void enterMethodBody(Java8Parser.MethodBodyContext ctx);
	void exitMethodBody(Java8Parser.MethodBodyContext ctx);
	void enterInstanceInitializer(Java8Parser.InstanceInitializerContext ctx);
	void exitInstanceInitializer(Java8Parser.InstanceInitializerContext ctx);
	void enterStaticInitializer(Java8Parser.StaticInitializerContext ctx);
	void exitStaticInitializer(Java8Parser.StaticInitializerContext ctx);
	void enterConstructorDeclaration(Java8Parser.ConstructorDeclarationContext ctx);
	void exitConstructorDeclaration(Java8Parser.ConstructorDeclarationContext ctx);
	void enterConstructorModifier(Java8Parser.ConstructorModifierContext ctx);
	void exitConstructorModifier(Java8Parser.ConstructorModifierContext ctx);
	void enterConstructorDeclarator(Java8Parser.ConstructorDeclaratorContext ctx);
	void exitConstructorDeclarator(Java8Parser.ConstructorDeclaratorContext ctx);
	void enterSimpleTypeName(Java8Parser.SimpleTypeNameContext ctx);
	void exitSimpleTypeName(Java8Parser.SimpleTypeNameContext ctx);
	void enterConstructorBody(Java8Parser.ConstructorBodyContext ctx);
	void exitConstructorBody(Java8Parser.ConstructorBodyContext ctx);
	void enterExplicitConstructorInvocation(Java8Parser.ExplicitConstructorInvocationContext ctx);
	void exitExplicitConstructorInvocation(Java8Parser.ExplicitConstructorInvocationContext ctx);
	void enterEnumDeclaration(Java8Parser.EnumDeclarationContext ctx);
	void exitEnumDeclaration(Java8Parser.EnumDeclarationContext ctx);
	void enterEnumBody(Java8Parser.EnumBodyContext ctx);
	void exitEnumBody(Java8Parser.EnumBodyContext ctx);
	void enterEnumConstantList(Java8Parser.EnumConstantListContext ctx);
	void exitEnumConstantList(Java8Parser.EnumConstantListContext ctx);
	void enterEnumConstant(Java8Parser.EnumConstantContext ctx);
	void exitEnumConstant(Java8Parser.EnumConstantContext ctx);
	void enterEnumConstantModifier(Java8Parser.EnumConstantModifierContext ctx);
	void exitEnumConstantModifier(Java8Parser.EnumConstantModifierContext ctx);
	void enterEnumBodyDeclarations(Java8Parser.EnumBodyDeclarationsContext ctx);
	void exitEnumBodyDeclarations(Java8Parser.EnumBodyDeclarationsContext ctx);
	void enterInterfaceDeclaration(Java8Parser.InterfaceDeclarationContext ctx);
	void exitInterfaceDeclaration(Java8Parser.InterfaceDeclarationContext ctx);
	void enterNormalInterfaceDeclaration(Java8Parser.NormalInterfaceDeclarationContext ctx);
	void exitNormalInterfaceDeclaration(Java8Parser.NormalInterfaceDeclarationContext ctx);
	void enterInterfaceModifier(Java8Parser.InterfaceModifierContext ctx);
	void exitInterfaceModifier(Java8Parser.InterfaceModifierContext ctx);
	void enterExtendsInterfaces(Java8Parser.ExtendsInterfacesContext ctx);
	void exitExtendsInterfaces(Java8Parser.ExtendsInterfacesContext ctx);
	void enterInterfaceBody(Java8Parser.InterfaceBodyContext ctx);
	void exitInterfaceBody(Java8Parser.InterfaceBodyContext ctx);
	void enterInterfaceMemberDeclaration(Java8Parser.InterfaceMemberDeclarationContext ctx);
	void exitInterfaceMemberDeclaration(Java8Parser.InterfaceMemberDeclarationContext ctx);
	void enterConstantDeclaration(Java8Parser.ConstantDeclarationContext ctx);
	void exitConstantDeclaration(Java8Parser.ConstantDeclarationContext ctx);
	void enterConstantModifier(Java8Parser.ConstantModifierContext ctx);
	void exitConstantModifier(Java8Parser.ConstantModifierContext ctx);
	void enterInterfaceMethodDeclaration(Java8Parser.InterfaceMethodDeclarationContext ctx);
	void exitInterfaceMethodDeclaration(Java8Parser.InterfaceMethodDeclarationContext ctx);
	void enterInterfaceMethodModifier(Java8Parser.InterfaceMethodModifierContext ctx);
	void exitInterfaceMethodModifier(Java8Parser.InterfaceMethodModifierContext ctx);
	void enterAnnotationTypeDeclaration(Java8Parser.AnnotationTypeDeclarationContext ctx);
	void exitAnnotationTypeDeclaration(Java8Parser.AnnotationTypeDeclarationContext ctx);
	void enterAnnotationTypeBody(Java8Parser.AnnotationTypeBodyContext ctx);
	void exitAnnotationTypeBody(Java8Parser.AnnotationTypeBodyContext ctx);
	void enterAnnotationTypeMemberDeclaration(Java8Parser.AnnotationTypeMemberDeclarationContext ctx);
	void exitAnnotationTypeMemberDeclaration(Java8Parser.AnnotationTypeMemberDeclarationContext ctx);
	void enterAnnotationTypeElementDeclaration(Java8Parser.AnnotationTypeElementDeclarationContext ctx);
	void exitAnnotationTypeElementDeclaration(Java8Parser.AnnotationTypeElementDeclarationContext ctx);
	void enterAnnotationTypeElementModifier(Java8Parser.AnnotationTypeElementModifierContext ctx);
	void exitAnnotationTypeElementModifier(Java8Parser.AnnotationTypeElementModifierContext ctx);
	void enterDefaultValue(Java8Parser.DefaultValueContext ctx);
	void exitDefaultValue(Java8Parser.DefaultValueContext ctx);
	void enterAnnotation(Java8Parser.AnnotationContext ctx);
	void exitAnnotation(Java8Parser.AnnotationContext ctx);
	void enterNormalAnnotation(Java8Parser.NormalAnnotationContext ctx);
	void exitNormalAnnotation(Java8Parser.NormalAnnotationContext ctx);
	void enterElementValuePairList(Java8Parser.ElementValuePairListContext ctx);
	void exitElementValuePairList(Java8Parser.ElementValuePairListContext ctx);
	void enterElementValuePair(Java8Parser.ElementValuePairContext ctx);
	void exitElementValuePair(Java8Parser.ElementValuePairContext ctx);
	void enterElementValue(Java8Parser.ElementValueContext ctx);
	void exitElementValue(Java8Parser.ElementValueContext ctx);
	void enterElementValueArrayInitializer(Java8Parser.ElementValueArrayInitializerContext ctx);
	void exitElementValueArrayInitializer(Java8Parser.ElementValueArrayInitializerContext ctx);
	void enterElementValueList(Java8Parser.ElementValueListContext ctx);
	void exitElementValueList(Java8Parser.ElementValueListContext ctx);
	void enterMarkerAnnotation(Java8Parser.MarkerAnnotationContext ctx);
	void exitMarkerAnnotation(Java8Parser.MarkerAnnotationContext ctx);
	void enterSingleElementAnnotation(Java8Parser.SingleElementAnnotationContext ctx);
	void exitSingleElementAnnotation(Java8Parser.SingleElementAnnotationContext ctx);
	void enterArrayInitializer(Java8Parser.ArrayInitializerContext ctx);
	void exitArrayInitializer(Java8Parser.ArrayInitializerContext ctx);
	void enterVariableInitializerList(Java8Parser.VariableInitializerListContext ctx);
	void exitVariableInitializerList(Java8Parser.VariableInitializerListContext ctx);
	void enterBlock(Java8Parser.BlockContext ctx);
	void exitBlock(Java8Parser.BlockContext ctx);
	void enterBlockStatements(Java8Parser.BlockStatementsContext ctx);
	void exitBlockStatements(Java8Parser.BlockStatementsContext ctx);
	void enterBlockStatement(Java8Parser.BlockStatementContext ctx);
	void exitBlockStatement(Java8Parser.BlockStatementContext ctx);
	void enterLocalVariableDeclarationStatement(Java8Parser.LocalVariableDeclarationStatementContext ctx);
	void exitLocalVariableDeclarationStatement(Java8Parser.LocalVariableDeclarationStatementContext ctx);
	void enterLocalVariableDeclaration(Java8Parser.LocalVariableDeclarationContext ctx);
	void exitLocalVariableDeclaration(Java8Parser.LocalVariableDeclarationContext ctx);
	void enterStatement(Java8Parser.StatementContext ctx);
	void exitStatement(Java8Parser.StatementContext ctx);
	void enterStatementNoShortIf(Java8Parser.StatementNoShortIfContext ctx);
	void exitStatementNoShortIf(Java8Parser.StatementNoShortIfContext ctx);
	void enterStatementWithoutTrailingSubstatement(Java8Parser.StatementWithoutTrailingSubstatementContext ctx);
	void exitStatementWithoutTrailingSubstatement(Java8Parser.StatementWithoutTrailingSubstatementContext ctx);
	void enterEmptyStatement(Java8Parser.EmptyStatementContext ctx);
	void exitEmptyStatement(Java8Parser.EmptyStatementContext ctx);
	void enterLabeledStatement(Java8Parser.LabeledStatementContext ctx);
	void exitLabeledStatement(Java8Parser.LabeledStatementContext ctx);
	void enterLabeledStatementNoShortIf(Java8Parser.LabeledStatementNoShortIfContext ctx);
	void exitLabeledStatementNoShortIf(Java8Parser.LabeledStatementNoShortIfContext ctx);
	void enterExpressionStatement(Java8Parser.ExpressionStatementContext ctx);
	void exitExpressionStatement(Java8Parser.ExpressionStatementContext ctx);
	void enterStatementExpression(Java8Parser.StatementExpressionContext ctx);
	void exitStatementExpression(Java8Parser.StatementExpressionContext ctx);
	void enterIfThenStatement(Java8Parser.IfThenStatementContext ctx);
	void exitIfThenStatement(Java8Parser.IfThenStatementContext ctx);
	void enterIfThenElseStatement(Java8Parser.IfThenElseStatementContext ctx);
	void exitIfThenElseStatement(Java8Parser.IfThenElseStatementContext ctx);
	void enterIfThenElseStatementNoShortIf(Java8Parser.IfThenElseStatementNoShortIfContext ctx);
	void exitIfThenElseStatementNoShortIf(Java8Parser.IfThenElseStatementNoShortIfContext ctx);
	void enterAssertStatement(Java8Parser.AssertStatementContext ctx);
	void exitAssertStatement(Java8Parser.AssertStatementContext ctx);
	void enterSwitchStatement(Java8Parser.SwitchStatementContext ctx);
	void exitSwitchStatement(Java8Parser.SwitchStatementContext ctx);
	void enterSwitchBlock(Java8Parser.SwitchBlockContext ctx);
	void exitSwitchBlock(Java8Parser.SwitchBlockContext ctx);
	void enterSwitchBlockStatementGroup(Java8Parser.SwitchBlockStatementGroupContext ctx);
	void exitSwitchBlockStatementGroup(Java8Parser.SwitchBlockStatementGroupContext ctx);
	void enterSwitchLabels(Java8Parser.SwitchLabelsContext ctx);
	void exitSwitchLabels(Java8Parser.SwitchLabelsContext ctx);
	void enterSwitchLabel(Java8Parser.SwitchLabelContext ctx);
	void exitSwitchLabel(Java8Parser.SwitchLabelContext ctx);
	void enterEnumConstantName(Java8Parser.EnumConstantNameContext ctx);
	void exitEnumConstantName(Java8Parser.EnumConstantNameContext ctx);
	void enterWhileStatement(Java8Parser.WhileStatementContext ctx);
	void exitWhileStatement(Java8Parser.WhileStatementContext ctx);
	void enterWhileStatementNoShortIf(Java8Parser.WhileStatementNoShortIfContext ctx);
	void exitWhileStatementNoShortIf(Java8Parser.WhileStatementNoShortIfContext ctx);
	void enterDoStatement(Java8Parser.DoStatementContext ctx);
	void exitDoStatement(Java8Parser.DoStatementContext ctx);
	void enterForStatement(Java8Parser.ForStatementContext ctx);
	void exitForStatement(Java8Parser.ForStatementContext ctx);
	void enterForStatementNoShortIf(Java8Parser.ForStatementNoShortIfContext ctx);
	void exitForStatementNoShortIf(Java8Parser.ForStatementNoShortIfContext ctx);
	void enterBasicForStatement(Java8Parser.BasicForStatementContext ctx);
	void exitBasicForStatement(Java8Parser.BasicForStatementContext ctx);
	void enterBasicForStatementNoShortIf(Java8Parser.BasicForStatementNoShortIfContext ctx);
	void exitBasicForStatementNoShortIf(Java8Parser.BasicForStatementNoShortIfContext ctx);
	void enterForInit(Java8Parser.ForInitContext ctx);
	void exitForInit(Java8Parser.ForInitContext ctx);
	void enterForUpdate(Java8Parser.ForUpdateContext ctx);
	void exitForUpdate(Java8Parser.ForUpdateContext ctx);
	void enterStatementExpressionList(Java8Parser.StatementExpressionListContext ctx);
	void exitStatementExpressionList(Java8Parser.StatementExpressionListContext ctx);
	void enterEnhancedForStatement(Java8Parser.EnhancedForStatementContext ctx);
	void exitEnhancedForStatement(Java8Parser.EnhancedForStatementContext ctx);
	void enterEnhancedForStatementNoShortIf(Java8Parser.EnhancedForStatementNoShortIfContext ctx);
	void exitEnhancedForStatementNoShortIf(Java8Parser.EnhancedForStatementNoShortIfContext ctx);
	void enterBreakStatement(Java8Parser.BreakStatementContext ctx);
	void exitBreakStatement(Java8Parser.BreakStatementContext ctx);
	void enterContinueStatement(Java8Parser.ContinueStatementContext ctx);
	void exitContinueStatement(Java8Parser.ContinueStatementContext ctx);
	void enterReturnStatement(Java8Parser.ReturnStatementContext ctx);
	void exitReturnStatement(Java8Parser.ReturnStatementContext ctx);
	void enterThrowStatement(Java8Parser.ThrowStatementContext ctx);
	void exitThrowStatement(Java8Parser.ThrowStatementContext ctx);
	void enterSynchronizedStatement(Java8Parser.SynchronizedStatementContext ctx);
	void exitSynchronizedStatement(Java8Parser.SynchronizedStatementContext ctx);
	void enterTryStatement(Java8Parser.TryStatementContext ctx);
	void exitTryStatement(Java8Parser.TryStatementContext ctx);
	void enterCatches(Java8Parser.CatchesContext ctx);
	void exitCatches(Java8Parser.CatchesContext ctx);
	void enterCatchClause(Java8Parser.CatchClauseContext ctx);
	void exitCatchClause(Java8Parser.CatchClauseContext ctx);
	void enterCatchFormalParameter(Java8Parser.CatchFormalParameterContext ctx);
	void exitCatchFormalParameter(Java8Parser.CatchFormalParameterContext ctx);
	void enterCatchType(Java8Parser.CatchTypeContext ctx);
	void exitCatchType(Java8Parser.CatchTypeContext ctx);
	void enterFinally_(Java8Parser.Finally_Context ctx);
	void exitFinally_(Java8Parser.Finally_Context ctx);
	void enterTryWithResourcesStatement(Java8Parser.TryWithResourcesStatementContext ctx);
	void exitTryWithResourcesStatement(Java8Parser.TryWithResourcesStatementContext ctx);
	void enterResourceSpecification(Java8Parser.ResourceSpecificationContext ctx);
	void exitResourceSpecification(Java8Parser.ResourceSpecificationContext ctx);
	void enterResourceList(Java8Parser.ResourceListContext ctx);
	void exitResourceList(Java8Parser.ResourceListContext ctx);
	void enterResource(Java8Parser.ResourceContext ctx);
	void exitResource(Java8Parser.ResourceContext ctx);
	void enterPrimary(Java8Parser.PrimaryContext ctx);
	void exitPrimary(Java8Parser.PrimaryContext ctx);
	void enterPrimaryNoNewArray(Java8Parser.PrimaryNoNewArrayContext ctx);
	void exitPrimaryNoNewArray(Java8Parser.PrimaryNoNewArrayContext ctx);
	void enterPrimaryNoNewArray_lf_arrayAccess(Java8Parser.PrimaryNoNewArray_lf_arrayAccessContext ctx);
	void exitPrimaryNoNewArray_lf_arrayAccess(Java8Parser.PrimaryNoNewArray_lf_arrayAccessContext ctx);
	void enterPrimaryNoNewArray_lfno_arrayAccess(Java8Parser.PrimaryNoNewArray_lfno_arrayAccessContext ctx);
	void exitPrimaryNoNewArray_lfno_arrayAccess(Java8Parser.PrimaryNoNewArray_lfno_arrayAccessContext ctx);
	void enterPrimaryNoNewArray_lf_primary(Java8Parser.PrimaryNoNewArray_lf_primaryContext ctx);
	void exitPrimaryNoNewArray_lf_primary(Java8Parser.PrimaryNoNewArray_lf_primaryContext ctx);
	void enterPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(Java8Parser.PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext ctx);
	void exitPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(Java8Parser.PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext ctx);
	void enterPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(Java8Parser.PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext ctx);
	void exitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(Java8Parser.PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext ctx);
	void enterPrimaryNoNewArray_lfno_primary(Java8Parser.PrimaryNoNewArray_lfno_primaryContext ctx);
	void exitPrimaryNoNewArray_lfno_primary(Java8Parser.PrimaryNoNewArray_lfno_primaryContext ctx);
	void enterPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(Java8Parser.PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext ctx);
	void exitPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(Java8Parser.PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext ctx);
	void enterPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(Java8Parser.PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext ctx);
	void exitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(Java8Parser.PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext ctx);
	void enterClassInstanceCreationExpression(Java8Parser.ClassInstanceCreationExpressionContext ctx);
	void exitClassInstanceCreationExpression(Java8Parser.ClassInstanceCreationExpressionContext ctx);
	void enterClassInstanceCreationExpression_lf_primary(Java8Parser.ClassInstanceCreationExpression_lf_primaryContext ctx);
	void exitClassInstanceCreationExpression_lf_primary(Java8Parser.ClassInstanceCreationExpression_lf_primaryContext ctx);
	void enterClassInstanceCreationExpression_lfno_primary(Java8Parser.ClassInstanceCreationExpression_lfno_primaryContext ctx);
	void exitClassInstanceCreationExpression_lfno_primary(Java8Parser.ClassInstanceCreationExpression_lfno_primaryContext ctx);
	void enterTypeArgumentsOrDiamond(Java8Parser.TypeArgumentsOrDiamondContext ctx);
	void exitTypeArgumentsOrDiamond(Java8Parser.TypeArgumentsOrDiamondContext ctx);
	void enterFieldAccess(Java8Parser.FieldAccessContext ctx);
	void exitFieldAccess(Java8Parser.FieldAccessContext ctx);
	void enterFieldAccess_lf_primary(Java8Parser.FieldAccess_lf_primaryContext ctx);
	void exitFieldAccess_lf_primary(Java8Parser.FieldAccess_lf_primaryContext ctx);
	void enterFieldAccess_lfno_primary(Java8Parser.FieldAccess_lfno_primaryContext ctx);
	void exitFieldAccess_lfno_primary(Java8Parser.FieldAccess_lfno_primaryContext ctx);
	void enterArrayAccess(Java8Parser.ArrayAccessContext ctx);
	void exitArrayAccess(Java8Parser.ArrayAccessContext ctx);
	void enterArrayAccess_lf_primary(Java8Parser.ArrayAccess_lf_primaryContext ctx);
	void exitArrayAccess_lf_primary(Java8Parser.ArrayAccess_lf_primaryContext ctx);
	void enterArrayAccess_lfno_primary(Java8Parser.ArrayAccess_lfno_primaryContext ctx);
	void exitArrayAccess_lfno_primary(Java8Parser.ArrayAccess_lfno_primaryContext ctx);
	void enterMethodInvocation(Java8Parser.MethodInvocationContext ctx);
	void exitMethodInvocation(Java8Parser.MethodInvocationContext ctx);
	void enterMethodInvocation_lf_primary(Java8Parser.MethodInvocation_lf_primaryContext ctx);
	void exitMethodInvocation_lf_primary(Java8Parser.MethodInvocation_lf_primaryContext ctx);
	void enterMethodInvocation_lfno_primary(Java8Parser.MethodInvocation_lfno_primaryContext ctx);
	void exitMethodInvocation_lfno_primary(Java8Parser.MethodInvocation_lfno_primaryContext ctx);
	void enterArgumentList(Java8Parser.ArgumentListContext ctx);
	void exitArgumentList(Java8Parser.ArgumentListContext ctx);
	void enterMethodReference(Java8Parser.MethodReferenceContext ctx);
	void exitMethodReference(Java8Parser.MethodReferenceContext ctx);
	void enterMethodReference_lf_primary(Java8Parser.MethodReference_lf_primaryContext ctx);
	void exitMethodReference_lf_primary(Java8Parser.MethodReference_lf_primaryContext ctx);
	void enterMethodReference_lfno_primary(Java8Parser.MethodReference_lfno_primaryContext ctx);
	void exitMethodReference_lfno_primary(Java8Parser.MethodReference_lfno_primaryContext ctx);
	void enterArrayCreationExpression(Java8Parser.ArrayCreationExpressionContext ctx);
	void exitArrayCreationExpression(Java8Parser.ArrayCreationExpressionContext ctx);
	void enterDimExprs(Java8Parser.DimExprsContext ctx);
	void exitDimExprs(Java8Parser.DimExprsContext ctx);
	void enterDimExpr(Java8Parser.DimExprContext ctx);
	void exitDimExpr(Java8Parser.DimExprContext ctx);
	void enterConstantExpression(Java8Parser.ConstantExpressionContext ctx);
	void exitConstantExpression(Java8Parser.ConstantExpressionContext ctx);
	void enterExpression(Java8Parser.ExpressionContext ctx);
	void exitExpression(Java8Parser.ExpressionContext ctx);
	void enterLambdaExpression(Java8Parser.LambdaExpressionContext ctx);
	void exitLambdaExpression(Java8Parser.LambdaExpressionContext ctx);
	void enterLambdaParameters(Java8Parser.LambdaParametersContext ctx);
	void exitLambdaParameters(Java8Parser.LambdaParametersContext ctx);
	void enterInferredFormalParameterList(Java8Parser.InferredFormalParameterListContext ctx);
	void exitInferredFormalParameterList(Java8Parser.InferredFormalParameterListContext ctx);
	void enterLambdaBody(Java8Parser.LambdaBodyContext ctx);
	void exitLambdaBody(Java8Parser.LambdaBodyContext ctx);
	void enterAssignmentExpression(Java8Parser.AssignmentExpressionContext ctx);
	void exitAssignmentExpression(Java8Parser.AssignmentExpressionContext ctx);
	void enterAssignment(Java8Parser.AssignmentContext ctx);
	void exitAssignment(Java8Parser.AssignmentContext ctx);
	void enterLeftHandSide(Java8Parser.LeftHandSideContext ctx);
	void exitLeftHandSide(Java8Parser.LeftHandSideContext ctx);
	void enterAssignmentOperator(Java8Parser.AssignmentOperatorContext ctx);
	void exitAssignmentOperator(Java8Parser.AssignmentOperatorContext ctx);
	void enterConditionalExpression(Java8Parser.ConditionalExpressionContext ctx);
	void exitConditionalExpression(Java8Parser.ConditionalExpressionContext ctx);
	void enterConditionalOrExpression(Java8Parser.ConditionalOrExpressionContext ctx);
	void exitConditionalOrExpression(Java8Parser.ConditionalOrExpressionContext ctx);
	void enterConditionalAndExpression(Java8Parser.ConditionalAndExpressionContext ctx);
	void exitConditionalAndExpression(Java8Parser.ConditionalAndExpressionContext ctx);
	void enterInclusiveOrExpression(Java8Parser.InclusiveOrExpressionContext ctx);
	void exitInclusiveOrExpression(Java8Parser.InclusiveOrExpressionContext ctx);
	void enterExclusiveOrExpression(Java8Parser.ExclusiveOrExpressionContext ctx);
	void exitExclusiveOrExpression(Java8Parser.ExclusiveOrExpressionContext ctx);
	void enterAndExpression(Java8Parser.AndExpressionContext ctx);
	void exitAndExpression(Java8Parser.AndExpressionContext ctx);
	void enterEqualityExpression(Java8Parser.EqualityExpressionContext ctx);
	void exitEqualityExpression(Java8Parser.EqualityExpressionContext ctx);
	void enterRelationalExpression(Java8Parser.RelationalExpressionContext ctx);
	void exitRelationalExpression(Java8Parser.RelationalExpressionContext ctx);
	void enterShiftExpression(Java8Parser.ShiftExpressionContext ctx);
	void exitShiftExpression(Java8Parser.ShiftExpressionContext ctx);
	void enterAdditiveExpression(Java8Parser.AdditiveExpressionContext ctx);
	void exitAdditiveExpression(Java8Parser.AdditiveExpressionContext ctx);
	void enterMultiplicativeExpression(Java8Parser.MultiplicativeExpressionContext ctx);
	void exitMultiplicativeExpression(Java8Parser.MultiplicativeExpressionContext ctx);
	void enterUnaryExpression(Java8Parser.UnaryExpressionContext ctx);
	void exitUnaryExpression(Java8Parser.UnaryExpressionContext ctx);
	void enterPreIncrementExpression(Java8Parser.PreIncrementExpressionContext ctx);
	void exitPreIncrementExpression(Java8Parser.PreIncrementExpressionContext ctx);
	void enterPreDecrementExpression(Java8Parser.PreDecrementExpressionContext ctx);
	void exitPreDecrementExpression(Java8Parser.PreDecrementExpressionContext ctx);
	void enterUnaryExpressionNotPlusMinus(Java8Parser.UnaryExpressionNotPlusMinusContext ctx);
	void exitUnaryExpressionNotPlusMinus(Java8Parser.UnaryExpressionNotPlusMinusContext ctx);
	void enterPostfixExpression(Java8Parser.PostfixExpressionContext ctx);
	void exitPostfixExpression(Java8Parser.PostfixExpressionContext ctx);
	void enterPostIncrementExpression(Java8Parser.PostIncrementExpressionContext ctx);
	void exitPostIncrementExpression(Java8Parser.PostIncrementExpressionContext ctx);
	void enterPostIncrementExpression_lf_postfixExpression(Java8Parser.PostIncrementExpression_lf_postfixExpressionContext ctx);
	void exitPostIncrementExpression_lf_postfixExpression(Java8Parser.PostIncrementExpression_lf_postfixExpressionContext ctx);
	void enterPostDecrementExpression(Java8Parser.PostDecrementExpressionContext ctx);
	void exitPostDecrementExpression(Java8Parser.PostDecrementExpressionContext ctx);
	void enterPostDecrementExpression_lf_postfixExpression(Java8Parser.PostDecrementExpression_lf_postfixExpressionContext ctx);
	void exitPostDecrementExpression_lf_postfixExpression(Java8Parser.PostDecrementExpression_lf_postfixExpressionContext ctx);
	void enterCastExpression(Java8Parser.CastExpressionContext ctx);
	void exitCastExpression(Java8Parser.CastExpressionContext ctx);
}